// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  username        String?   @unique
  bio             String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  coverImage      String?
  profileImage    String?
  hashedPassword  String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  followingIds    String[]  @db.ObjectId
  hasNotification Boolean?

  posts         Post[]
  comments      Comment[]
  notifications Notification[]
  Community     Community[]    @relation(fields: [communityIds], references: [id])
  communityIds  String[]       @db.ObjectId
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  likedIds  String[] @db.ObjectId
  image     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  comments     Comment[]
  Community    Community[] @relation(fields: [communityIds], references: [id])
  communityIds String[]    @db.ObjectId
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Community {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String?
  profileImage String?
  userIds      String[] @db.ObjectId
  postIds      String[] @db.ObjectId
  ownerId      String   @db.ObjectId
  createdAt    DateTime? @default(now())
  users        User[]   @relation(fields: [userIds], references: [id])
  posts        Post[]   @relation(fields: [postIds], references: [id])
}
